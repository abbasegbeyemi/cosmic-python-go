// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/abbasegbeyemi/cosmic-python-go/ent/batch"
	"github.com/abbasegbeyemi/cosmic-python-go/ent/orderline"
	"github.com/abbasegbeyemi/cosmic-python-go/ent/predicate"
)

// BatchUpdate is the builder for updating Batch entities.
type BatchUpdate struct {
	config
	hooks    []Hook
	mutation *BatchMutation
}

// Where appends a list predicates to the BatchUpdate builder.
func (bu *BatchUpdate) Where(ps ...predicate.Batch) *BatchUpdate {
	bu.mutation.Where(ps...)
	return bu
}

// SetReference sets the "reference" field.
func (bu *BatchUpdate) SetReference(s string) *BatchUpdate {
	bu.mutation.SetReference(s)
	return bu
}

// SetNillableReference sets the "reference" field if the given value is not nil.
func (bu *BatchUpdate) SetNillableReference(s *string) *BatchUpdate {
	if s != nil {
		bu.SetReference(*s)
	}
	return bu
}

// SetSku sets the "sku" field.
func (bu *BatchUpdate) SetSku(s string) *BatchUpdate {
	bu.mutation.SetSku(s)
	return bu
}

// SetNillableSku sets the "sku" field if the given value is not nil.
func (bu *BatchUpdate) SetNillableSku(s *string) *BatchUpdate {
	if s != nil {
		bu.SetSku(*s)
	}
	return bu
}

// SetQuantity sets the "quantity" field.
func (bu *BatchUpdate) SetQuantity(i int) *BatchUpdate {
	bu.mutation.ResetQuantity()
	bu.mutation.SetQuantity(i)
	return bu
}

// SetNillableQuantity sets the "quantity" field if the given value is not nil.
func (bu *BatchUpdate) SetNillableQuantity(i *int) *BatchUpdate {
	if i != nil {
		bu.SetQuantity(*i)
	}
	return bu
}

// AddQuantity adds i to the "quantity" field.
func (bu *BatchUpdate) AddQuantity(i int) *BatchUpdate {
	bu.mutation.AddQuantity(i)
	return bu
}

// SetEta sets the "eta" field.
func (bu *BatchUpdate) SetEta(t time.Time) *BatchUpdate {
	bu.mutation.SetEta(t)
	return bu
}

// SetNillableEta sets the "eta" field if the given value is not nil.
func (bu *BatchUpdate) SetNillableEta(t *time.Time) *BatchUpdate {
	if t != nil {
		bu.SetEta(*t)
	}
	return bu
}

// AddOrderLineIDs adds the "order_lines" edge to the OrderLine entity by IDs.
func (bu *BatchUpdate) AddOrderLineIDs(ids ...int) *BatchUpdate {
	bu.mutation.AddOrderLineIDs(ids...)
	return bu
}

// AddOrderLines adds the "order_lines" edges to the OrderLine entity.
func (bu *BatchUpdate) AddOrderLines(o ...*OrderLine) *BatchUpdate {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return bu.AddOrderLineIDs(ids...)
}

// Mutation returns the BatchMutation object of the builder.
func (bu *BatchUpdate) Mutation() *BatchMutation {
	return bu.mutation
}

// ClearOrderLines clears all "order_lines" edges to the OrderLine entity.
func (bu *BatchUpdate) ClearOrderLines() *BatchUpdate {
	bu.mutation.ClearOrderLines()
	return bu
}

// RemoveOrderLineIDs removes the "order_lines" edge to OrderLine entities by IDs.
func (bu *BatchUpdate) RemoveOrderLineIDs(ids ...int) *BatchUpdate {
	bu.mutation.RemoveOrderLineIDs(ids...)
	return bu
}

// RemoveOrderLines removes "order_lines" edges to OrderLine entities.
func (bu *BatchUpdate) RemoveOrderLines(o ...*OrderLine) *BatchUpdate {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return bu.RemoveOrderLineIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (bu *BatchUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, bu.sqlSave, bu.mutation, bu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (bu *BatchUpdate) SaveX(ctx context.Context) int {
	affected, err := bu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (bu *BatchUpdate) Exec(ctx context.Context) error {
	_, err := bu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bu *BatchUpdate) ExecX(ctx context.Context) {
	if err := bu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (bu *BatchUpdate) check() error {
	if v, ok := bu.mutation.Quantity(); ok {
		if err := batch.QuantityValidator(v); err != nil {
			return &ValidationError{Name: "quantity", err: fmt.Errorf(`ent: validator failed for field "Batch.quantity": %w`, err)}
		}
	}
	return nil
}

func (bu *BatchUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := bu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(batch.Table, batch.Columns, sqlgraph.NewFieldSpec(batch.FieldID, field.TypeInt))
	if ps := bu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := bu.mutation.Reference(); ok {
		_spec.SetField(batch.FieldReference, field.TypeString, value)
	}
	if value, ok := bu.mutation.Sku(); ok {
		_spec.SetField(batch.FieldSku, field.TypeString, value)
	}
	if value, ok := bu.mutation.Quantity(); ok {
		_spec.SetField(batch.FieldQuantity, field.TypeInt, value)
	}
	if value, ok := bu.mutation.AddedQuantity(); ok {
		_spec.AddField(batch.FieldQuantity, field.TypeInt, value)
	}
	if value, ok := bu.mutation.Eta(); ok {
		_spec.SetField(batch.FieldEta, field.TypeTime, value)
	}
	if bu.mutation.OrderLinesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   batch.OrderLinesTable,
			Columns: []string{batch.OrderLinesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orderline.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bu.mutation.RemovedOrderLinesIDs(); len(nodes) > 0 && !bu.mutation.OrderLinesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   batch.OrderLinesTable,
			Columns: []string{batch.OrderLinesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orderline.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bu.mutation.OrderLinesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   batch.OrderLinesTable,
			Columns: []string{batch.OrderLinesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orderline.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, bu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{batch.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	bu.mutation.done = true
	return n, nil
}

// BatchUpdateOne is the builder for updating a single Batch entity.
type BatchUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *BatchMutation
}

// SetReference sets the "reference" field.
func (buo *BatchUpdateOne) SetReference(s string) *BatchUpdateOne {
	buo.mutation.SetReference(s)
	return buo
}

// SetNillableReference sets the "reference" field if the given value is not nil.
func (buo *BatchUpdateOne) SetNillableReference(s *string) *BatchUpdateOne {
	if s != nil {
		buo.SetReference(*s)
	}
	return buo
}

// SetSku sets the "sku" field.
func (buo *BatchUpdateOne) SetSku(s string) *BatchUpdateOne {
	buo.mutation.SetSku(s)
	return buo
}

// SetNillableSku sets the "sku" field if the given value is not nil.
func (buo *BatchUpdateOne) SetNillableSku(s *string) *BatchUpdateOne {
	if s != nil {
		buo.SetSku(*s)
	}
	return buo
}

// SetQuantity sets the "quantity" field.
func (buo *BatchUpdateOne) SetQuantity(i int) *BatchUpdateOne {
	buo.mutation.ResetQuantity()
	buo.mutation.SetQuantity(i)
	return buo
}

// SetNillableQuantity sets the "quantity" field if the given value is not nil.
func (buo *BatchUpdateOne) SetNillableQuantity(i *int) *BatchUpdateOne {
	if i != nil {
		buo.SetQuantity(*i)
	}
	return buo
}

// AddQuantity adds i to the "quantity" field.
func (buo *BatchUpdateOne) AddQuantity(i int) *BatchUpdateOne {
	buo.mutation.AddQuantity(i)
	return buo
}

// SetEta sets the "eta" field.
func (buo *BatchUpdateOne) SetEta(t time.Time) *BatchUpdateOne {
	buo.mutation.SetEta(t)
	return buo
}

// SetNillableEta sets the "eta" field if the given value is not nil.
func (buo *BatchUpdateOne) SetNillableEta(t *time.Time) *BatchUpdateOne {
	if t != nil {
		buo.SetEta(*t)
	}
	return buo
}

// AddOrderLineIDs adds the "order_lines" edge to the OrderLine entity by IDs.
func (buo *BatchUpdateOne) AddOrderLineIDs(ids ...int) *BatchUpdateOne {
	buo.mutation.AddOrderLineIDs(ids...)
	return buo
}

// AddOrderLines adds the "order_lines" edges to the OrderLine entity.
func (buo *BatchUpdateOne) AddOrderLines(o ...*OrderLine) *BatchUpdateOne {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return buo.AddOrderLineIDs(ids...)
}

// Mutation returns the BatchMutation object of the builder.
func (buo *BatchUpdateOne) Mutation() *BatchMutation {
	return buo.mutation
}

// ClearOrderLines clears all "order_lines" edges to the OrderLine entity.
func (buo *BatchUpdateOne) ClearOrderLines() *BatchUpdateOne {
	buo.mutation.ClearOrderLines()
	return buo
}

// RemoveOrderLineIDs removes the "order_lines" edge to OrderLine entities by IDs.
func (buo *BatchUpdateOne) RemoveOrderLineIDs(ids ...int) *BatchUpdateOne {
	buo.mutation.RemoveOrderLineIDs(ids...)
	return buo
}

// RemoveOrderLines removes "order_lines" edges to OrderLine entities.
func (buo *BatchUpdateOne) RemoveOrderLines(o ...*OrderLine) *BatchUpdateOne {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return buo.RemoveOrderLineIDs(ids...)
}

// Where appends a list predicates to the BatchUpdate builder.
func (buo *BatchUpdateOne) Where(ps ...predicate.Batch) *BatchUpdateOne {
	buo.mutation.Where(ps...)
	return buo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (buo *BatchUpdateOne) Select(field string, fields ...string) *BatchUpdateOne {
	buo.fields = append([]string{field}, fields...)
	return buo
}

// Save executes the query and returns the updated Batch entity.
func (buo *BatchUpdateOne) Save(ctx context.Context) (*Batch, error) {
	return withHooks(ctx, buo.sqlSave, buo.mutation, buo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (buo *BatchUpdateOne) SaveX(ctx context.Context) *Batch {
	node, err := buo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (buo *BatchUpdateOne) Exec(ctx context.Context) error {
	_, err := buo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (buo *BatchUpdateOne) ExecX(ctx context.Context) {
	if err := buo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (buo *BatchUpdateOne) check() error {
	if v, ok := buo.mutation.Quantity(); ok {
		if err := batch.QuantityValidator(v); err != nil {
			return &ValidationError{Name: "quantity", err: fmt.Errorf(`ent: validator failed for field "Batch.quantity": %w`, err)}
		}
	}
	return nil
}

func (buo *BatchUpdateOne) sqlSave(ctx context.Context) (_node *Batch, err error) {
	if err := buo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(batch.Table, batch.Columns, sqlgraph.NewFieldSpec(batch.FieldID, field.TypeInt))
	id, ok := buo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Batch.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := buo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, batch.FieldID)
		for _, f := range fields {
			if !batch.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != batch.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := buo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := buo.mutation.Reference(); ok {
		_spec.SetField(batch.FieldReference, field.TypeString, value)
	}
	if value, ok := buo.mutation.Sku(); ok {
		_spec.SetField(batch.FieldSku, field.TypeString, value)
	}
	if value, ok := buo.mutation.Quantity(); ok {
		_spec.SetField(batch.FieldQuantity, field.TypeInt, value)
	}
	if value, ok := buo.mutation.AddedQuantity(); ok {
		_spec.AddField(batch.FieldQuantity, field.TypeInt, value)
	}
	if value, ok := buo.mutation.Eta(); ok {
		_spec.SetField(batch.FieldEta, field.TypeTime, value)
	}
	if buo.mutation.OrderLinesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   batch.OrderLinesTable,
			Columns: []string{batch.OrderLinesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orderline.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := buo.mutation.RemovedOrderLinesIDs(); len(nodes) > 0 && !buo.mutation.OrderLinesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   batch.OrderLinesTable,
			Columns: []string{batch.OrderLinesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orderline.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := buo.mutation.OrderLinesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   batch.OrderLinesTable,
			Columns: []string{batch.OrderLinesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orderline.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Batch{config: buo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, buo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{batch.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	buo.mutation.done = true
	return _node, nil
}
