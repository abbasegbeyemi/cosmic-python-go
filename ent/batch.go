// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/abbasegbeyemi/cosmic-python-go/ent/batch"
)

// Batch is the model entity for the Batch schema.
type Batch struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Reference holds the value of the "reference" field.
	Reference string `json:"reference,omitempty"`
	// Sku holds the value of the "sku" field.
	Sku string `json:"sku,omitempty"`
	// Quantity holds the value of the "quantity" field.
	Quantity int `json:"quantity,omitempty"`
	// Eta holds the value of the "eta" field.
	Eta time.Time `json:"eta,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the BatchQuery when eager-loading is set.
	Edges        BatchEdges `json:"edges"`
	selectValues sql.SelectValues
}

// BatchEdges holds the relations/edges for other nodes in the graph.
type BatchEdges struct {
	// OrderLines holds the value of the order_lines edge.
	OrderLines []*OrderLine `json:"order_lines,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// OrderLinesOrErr returns the OrderLines value or an error if the edge
// was not loaded in eager-loading.
func (e BatchEdges) OrderLinesOrErr() ([]*OrderLine, error) {
	if e.loadedTypes[0] {
		return e.OrderLines, nil
	}
	return nil, &NotLoadedError{edge: "order_lines"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Batch) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case batch.FieldID, batch.FieldQuantity:
			values[i] = new(sql.NullInt64)
		case batch.FieldReference, batch.FieldSku:
			values[i] = new(sql.NullString)
		case batch.FieldEta:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Batch fields.
func (b *Batch) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case batch.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			b.ID = int(value.Int64)
		case batch.FieldReference:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field reference", values[i])
			} else if value.Valid {
				b.Reference = value.String
			}
		case batch.FieldSku:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field sku", values[i])
			} else if value.Valid {
				b.Sku = value.String
			}
		case batch.FieldQuantity:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field quantity", values[i])
			} else if value.Valid {
				b.Quantity = int(value.Int64)
			}
		case batch.FieldEta:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field eta", values[i])
			} else if value.Valid {
				b.Eta = value.Time
			}
		default:
			b.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Batch.
// This includes values selected through modifiers, order, etc.
func (b *Batch) Value(name string) (ent.Value, error) {
	return b.selectValues.Get(name)
}

// QueryOrderLines queries the "order_lines" edge of the Batch entity.
func (b *Batch) QueryOrderLines() *OrderLineQuery {
	return NewBatchClient(b.config).QueryOrderLines(b)
}

// Update returns a builder for updating this Batch.
// Note that you need to call Batch.Unwrap() before calling this method if this Batch
// was returned from a transaction, and the transaction was committed or rolled back.
func (b *Batch) Update() *BatchUpdateOne {
	return NewBatchClient(b.config).UpdateOne(b)
}

// Unwrap unwraps the Batch entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (b *Batch) Unwrap() *Batch {
	_tx, ok := b.config.driver.(*txDriver)
	if !ok {
		panic("ent: Batch is not a transactional entity")
	}
	b.config.driver = _tx.drv
	return b
}

// String implements the fmt.Stringer.
func (b *Batch) String() string {
	var builder strings.Builder
	builder.WriteString("Batch(")
	builder.WriteString(fmt.Sprintf("id=%v, ", b.ID))
	builder.WriteString("reference=")
	builder.WriteString(b.Reference)
	builder.WriteString(", ")
	builder.WriteString("sku=")
	builder.WriteString(b.Sku)
	builder.WriteString(", ")
	builder.WriteString("quantity=")
	builder.WriteString(fmt.Sprintf("%v", b.Quantity))
	builder.WriteString(", ")
	builder.WriteString("eta=")
	builder.WriteString(b.Eta.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Batches is a parsable slice of Batch.
type Batches []*Batch
