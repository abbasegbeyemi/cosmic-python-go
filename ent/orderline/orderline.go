// Code generated by ent, DO NOT EDIT.

package orderline

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the orderline type in the database.
	Label = "order_line"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldOrderID holds the string denoting the order_id field in the database.
	FieldOrderID = "order_id"
	// FieldSku holds the string denoting the sku field in the database.
	FieldSku = "sku"
	// FieldQuantity holds the string denoting the quantity field in the database.
	FieldQuantity = "quantity"
	// EdgeBatch holds the string denoting the batch edge name in mutations.
	EdgeBatch = "batch"
	// Table holds the table name of the orderline in the database.
	Table = "order_lines"
	// BatchTable is the table that holds the batch relation/edge.
	BatchTable = "order_lines"
	// BatchInverseTable is the table name for the Batch entity.
	// It exists in this package in order to avoid circular dependency with the "batch" package.
	BatchInverseTable = "batches"
	// BatchColumn is the table column denoting the batch relation/edge.
	BatchColumn = "batch_order_lines"
)

// Columns holds all SQL columns for orderline fields.
var Columns = []string{
	FieldID,
	FieldOrderID,
	FieldSku,
	FieldQuantity,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "order_lines"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"batch_order_lines",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the OrderLine queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByOrderID orders the results by the order_id field.
func ByOrderID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOrderID, opts...).ToFunc()
}

// BySku orders the results by the sku field.
func BySku(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSku, opts...).ToFunc()
}

// ByQuantity orders the results by the quantity field.
func ByQuantity(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldQuantity, opts...).ToFunc()
}

// ByBatchField orders the results by batch field.
func ByBatchField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newBatchStep(), sql.OrderByField(field, opts...))
	}
}
func newBatchStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(BatchInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, BatchTable, BatchColumn),
	)
}
