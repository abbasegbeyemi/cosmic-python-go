// Code generated by ent, DO NOT EDIT.

package batch

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the batch type in the database.
	Label = "batch"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldReference holds the string denoting the reference field in the database.
	FieldReference = "reference"
	// FieldSku holds the string denoting the sku field in the database.
	FieldSku = "sku"
	// FieldQuantity holds the string denoting the quantity field in the database.
	FieldQuantity = "quantity"
	// FieldEta holds the string denoting the eta field in the database.
	FieldEta = "eta"
	// EdgeOrderLines holds the string denoting the order_lines edge name in mutations.
	EdgeOrderLines = "order_lines"
	// Table holds the table name of the batch in the database.
	Table = "batches"
	// OrderLinesTable is the table that holds the order_lines relation/edge.
	OrderLinesTable = "order_lines"
	// OrderLinesInverseTable is the table name for the OrderLine entity.
	// It exists in this package in order to avoid circular dependency with the "orderline" package.
	OrderLinesInverseTable = "order_lines"
	// OrderLinesColumn is the table column denoting the order_lines relation/edge.
	OrderLinesColumn = "batch_order_lines"
)

// Columns holds all SQL columns for batch fields.
var Columns = []string{
	FieldID,
	FieldReference,
	FieldSku,
	FieldQuantity,
	FieldEta,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// QuantityValidator is a validator for the "quantity" field. It is called by the builders before save.
	QuantityValidator func(int) error
)

// OrderOption defines the ordering options for the Batch queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByReference orders the results by the reference field.
func ByReference(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldReference, opts...).ToFunc()
}

// BySku orders the results by the sku field.
func BySku(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSku, opts...).ToFunc()
}

// ByQuantity orders the results by the quantity field.
func ByQuantity(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldQuantity, opts...).ToFunc()
}

// ByEta orders the results by the eta field.
func ByEta(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEta, opts...).ToFunc()
}

// ByOrderLinesCount orders the results by order_lines count.
func ByOrderLinesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newOrderLinesStep(), opts...)
	}
}

// ByOrderLines orders the results by order_lines terms.
func ByOrderLines(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newOrderLinesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newOrderLinesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(OrderLinesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, OrderLinesTable, OrderLinesColumn),
	)
}
