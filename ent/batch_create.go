// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/abbasegbeyemi/cosmic-python-go/ent/batch"
	"github.com/abbasegbeyemi/cosmic-python-go/ent/orderline"
)

// BatchCreate is the builder for creating a Batch entity.
type BatchCreate struct {
	config
	mutation *BatchMutation
	hooks    []Hook
}

// SetReference sets the "reference" field.
func (bc *BatchCreate) SetReference(s string) *BatchCreate {
	bc.mutation.SetReference(s)
	return bc
}

// SetSku sets the "sku" field.
func (bc *BatchCreate) SetSku(s string) *BatchCreate {
	bc.mutation.SetSku(s)
	return bc
}

// SetQuantity sets the "quantity" field.
func (bc *BatchCreate) SetQuantity(i int) *BatchCreate {
	bc.mutation.SetQuantity(i)
	return bc
}

// SetEta sets the "eta" field.
func (bc *BatchCreate) SetEta(t time.Time) *BatchCreate {
	bc.mutation.SetEta(t)
	return bc
}

// AddOrderLineIDs adds the "order_lines" edge to the OrderLine entity by IDs.
func (bc *BatchCreate) AddOrderLineIDs(ids ...int) *BatchCreate {
	bc.mutation.AddOrderLineIDs(ids...)
	return bc
}

// AddOrderLines adds the "order_lines" edges to the OrderLine entity.
func (bc *BatchCreate) AddOrderLines(o ...*OrderLine) *BatchCreate {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return bc.AddOrderLineIDs(ids...)
}

// Mutation returns the BatchMutation object of the builder.
func (bc *BatchCreate) Mutation() *BatchMutation {
	return bc.mutation
}

// Save creates the Batch in the database.
func (bc *BatchCreate) Save(ctx context.Context) (*Batch, error) {
	return withHooks(ctx, bc.sqlSave, bc.mutation, bc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (bc *BatchCreate) SaveX(ctx context.Context) *Batch {
	v, err := bc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (bc *BatchCreate) Exec(ctx context.Context) error {
	_, err := bc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bc *BatchCreate) ExecX(ctx context.Context) {
	if err := bc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (bc *BatchCreate) check() error {
	if _, ok := bc.mutation.Reference(); !ok {
		return &ValidationError{Name: "reference", err: errors.New(`ent: missing required field "Batch.reference"`)}
	}
	if _, ok := bc.mutation.Sku(); !ok {
		return &ValidationError{Name: "sku", err: errors.New(`ent: missing required field "Batch.sku"`)}
	}
	if _, ok := bc.mutation.Quantity(); !ok {
		return &ValidationError{Name: "quantity", err: errors.New(`ent: missing required field "Batch.quantity"`)}
	}
	if v, ok := bc.mutation.Quantity(); ok {
		if err := batch.QuantityValidator(v); err != nil {
			return &ValidationError{Name: "quantity", err: fmt.Errorf(`ent: validator failed for field "Batch.quantity": %w`, err)}
		}
	}
	if _, ok := bc.mutation.Eta(); !ok {
		return &ValidationError{Name: "eta", err: errors.New(`ent: missing required field "Batch.eta"`)}
	}
	return nil
}

func (bc *BatchCreate) sqlSave(ctx context.Context) (*Batch, error) {
	if err := bc.check(); err != nil {
		return nil, err
	}
	_node, _spec := bc.createSpec()
	if err := sqlgraph.CreateNode(ctx, bc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	bc.mutation.id = &_node.ID
	bc.mutation.done = true
	return _node, nil
}

func (bc *BatchCreate) createSpec() (*Batch, *sqlgraph.CreateSpec) {
	var (
		_node = &Batch{config: bc.config}
		_spec = sqlgraph.NewCreateSpec(batch.Table, sqlgraph.NewFieldSpec(batch.FieldID, field.TypeInt))
	)
	if value, ok := bc.mutation.Reference(); ok {
		_spec.SetField(batch.FieldReference, field.TypeString, value)
		_node.Reference = value
	}
	if value, ok := bc.mutation.Sku(); ok {
		_spec.SetField(batch.FieldSku, field.TypeString, value)
		_node.Sku = value
	}
	if value, ok := bc.mutation.Quantity(); ok {
		_spec.SetField(batch.FieldQuantity, field.TypeInt, value)
		_node.Quantity = value
	}
	if value, ok := bc.mutation.Eta(); ok {
		_spec.SetField(batch.FieldEta, field.TypeTime, value)
		_node.Eta = value
	}
	if nodes := bc.mutation.OrderLinesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   batch.OrderLinesTable,
			Columns: []string{batch.OrderLinesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orderline.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// BatchCreateBulk is the builder for creating many Batch entities in bulk.
type BatchCreateBulk struct {
	config
	err      error
	builders []*BatchCreate
}

// Save creates the Batch entities in the database.
func (bcb *BatchCreateBulk) Save(ctx context.Context) ([]*Batch, error) {
	if bcb.err != nil {
		return nil, bcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(bcb.builders))
	nodes := make([]*Batch, len(bcb.builders))
	mutators := make([]Mutator, len(bcb.builders))
	for i := range bcb.builders {
		func(i int, root context.Context) {
			builder := bcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*BatchMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, bcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, bcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, bcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (bcb *BatchCreateBulk) SaveX(ctx context.Context) []*Batch {
	v, err := bcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (bcb *BatchCreateBulk) Exec(ctx context.Context) error {
	_, err := bcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bcb *BatchCreateBulk) ExecX(ctx context.Context) {
	if err := bcb.Exec(ctx); err != nil {
		panic(err)
	}
}
